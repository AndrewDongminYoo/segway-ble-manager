buildscript {
    // BuildScript is evaluated before everything else so we can't use getExtOrDefault
    def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["SegwayBleManager_kotlinVersion"]

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:7.2.2"
        // noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

def isNewArchitectureEnabled() {
    return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"


def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["SegwayBleManager_" + name]
}

def getExtOrIntegerDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["SegwayBleManager_" + name]).toInteger()
}

android {
    compileSdk getExtOrIntegerDefault("compileSdkVersion")
    ndkVersion getExtOrIntegerDefault("ndkVersion")
    buildToolsVersion getExtOrIntegerDefault("buildToolsVersion")

    defaultConfig {
        minSdkVersion getExtOrIntegerDefault("minSdkVersion")
        targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        disable "GradleCompatible"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    sourceSets {
        main {
            //noinspection GroovyImplicitNullArgumentCall
            if (isNewArchitectureEnabled()) {
                java.srcDirs += [
                    "src/newarch",
                    // This is needed to build Kotlin project with NewArch enabled
                    "${project.buildDir}/generated/source/codegen/java"
                ]
            } else {
                java.srcDirs += ["src/oldarch"]
            }
        }
    }
}

repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
    // For < 0.71, this will be from the local maven repo
    // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
    implementation 'com.facebook.react:react-native:0.71.0-rc.0'
    //noinspection GradleDependency
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

if (isNewArchitectureEnabled()) {
    react {
        jsRootDir = file("../src/")
        libraryName = "SegwayBleManager"
        codegenJavaPackageName = "com.gbike.segwayblemanager"
    }
}
